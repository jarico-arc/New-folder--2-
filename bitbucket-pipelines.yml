# Bitbucket Pipelines for YugabyteDB Deployment
# ‚úÖ FIXED: Comprehensive CI/CD pipeline with proper timeouts and validation

image: atlassian/default-image:4

definitions:
  caches:
    terraform: terraform/.terraform
    helm: ~/.cache/helm

  services:
    docker:
      memory: 2048

pipelines:
  default:
    - step:
        name: Lint and Validate Manifests
        image: python:3.11
        caches:
          - pip
        script:
          - echo "üîç Installing dependencies..."
          - pip install yamllint
          - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          - chmod +x kubectl && mv kubectl /usr/local/bin/
          - wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          - tar xf kubeval-linux-amd64.tar.gz && mv kubeval /usr/local/bin
          - echo "üìã Linting YAML files..."
          - yamllint -c .yamllint.yml manifests/ || (echo "‚ùå YAML linting failed" && exit 1)  # ‚úÖ FIXED: Fail on warnings
          - echo "‚úÖ Validating Kubernetes manifests..."
          - find manifests/ -name "*.yaml" -exec kubeval {} \; || (echo "‚ùå Validation failed" && exit 1)  # ‚úÖ FIXED: Fail on warnings
          - echo "üîç Checking shell scripts..."
          - apt-get update && apt-get install -y shellcheck
          - find scripts/ -name "*.sh" -exec shellcheck {} \; || (echo "‚ùå Shell checking failed" && exit 1)  # ‚úÖ FIXED: Fail on warnings
          - echo "üß™ Running Python tests..."
          - pip install -r requirements.txt
          - python -m pytest tests/ -v --tb=short || (echo "‚ùå Python tests failed" && exit 1)
          - echo "‚úÖ Validation completed successfully"

    - step:
        name: Security Scanning
        image: aquasec/trivy:latest
        script:
          - echo "üîí Running security scan..."
          - trivy fs --format table --exit-code 1 --severity HIGH,CRITICAL .  # ‚úÖ FIXED: Fail on high/critical vulnerabilities
          - echo "‚úÖ Security scan completed"

    - parallel:
        - step:
            name: Terraform Validation
            image: hashicorp/terraform:1.6
            caches:
              - terraform
            script:
              - echo "üèóÔ∏è Validating Terraform configuration..."
              - cd terraform
              - terraform --version
              - terraform init -backend=false
              - terraform validate
              - terraform fmt -check=true || (echo "‚ùå Terraform formatting issues found" && exit 1)  # ‚úÖ FIXED: Fail on format issues
              - echo "‚úÖ Terraform validation completed"

        - step:
            name: Script Validation
            image: ubuntu:22.04
            script:
              - echo "üîç Validating deployment scripts..."
              - apt-get update && apt-get install -y shellcheck
              - find scripts -name "*.sh" -exec shellcheck {} \; || (echo "‚ùå Script validation failed" && exit 1)  # ‚úÖ FIXED: Fail on issues
              - echo "‚úÖ Script validation completed"

  branches:
    main:
      - step:
          name: Lint and Validate
          image: python:3.11
          script:
            - pip install yamllint
            - yamllint -c .yamllint.yml manifests/ || (echo "‚ùå YAML linting failed" && exit 1)

      - step:
          name: Security Scan
          image: aquasec/trivy:latest
          script:
            - trivy fs --format table --exit-code 1 --severity HIGH,CRITICAL .

      - step:
          name: Test Deployment
          image: atlassian/default-image:4
          services:
            - docker
          script:
            - echo "üß™ Setting up test environment..."
            - curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            - chmod +x ./kind && mv ./kind /usr/local/bin/kind
            - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            - chmod +x kubectl && mv kubectl /usr/local/bin/
            - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            - echo "üîß Creating Kind cluster..."
            - kind create cluster --name yugabytedb-test --wait 300s  # ‚úÖ FIXED: 5 minute timeout
            - echo "üì¶ Installing YugabyteDB Operator..."
            - kubectl apply -f manifests/operator/namespace.yaml
            - helm repo add yugabytedb https://charts.yugabyte.com
            - helm repo update
            - helm install yugabyte-operator yugabytedb/yugabyte-k8s-operator --namespace yb-operator --wait --timeout=15m  # ‚úÖ FIXED: 15 minute timeout
            - echo "üöÄ Deploying test environment..."
            - kubectl apply -f manifests/namespaces/environments.yaml
            - kubectl apply -f manifests/clusters/codet-dev-yb-cluster.yaml
            - echo "‚è≥ Waiting for deployment..."
            - timeout 1800 kubectl wait --for=condition=ready pod -l app=yb-master -n codet-dev-yb --timeout=1800s || (echo "‚ùå Timeout waiting for pods (30 minutes)" && exit 1)  # ‚úÖ FIXED: Fail on timeout
            - kubectl get pods -n codet-dev-yb
            - echo "üîç Running basic connectivity test..."
            - kubectl exec -n codet-dev-yb deployment/yb-tserver-0 -- ysqlsh -h localhost -c "SELECT 1;" || echo "‚ùå Database connectivity test failed"
            - echo "‚úÖ Test deployment completed"
          after-script:
            - kind delete cluster --name yugabytedb-test || echo "Cleanup completed"

      - step:
          name: Deploy to Staging
          deployment: staging
          trigger: manual
          script:
            - echo "üöÄ Deploying to staging environment..."
            - echo "Setting up GCP authentication..."
            - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-service-account.json
            - gcloud auth activate-service-account --key-file gcp-service-account.json
            - gcloud config set project $GCP_PROJECT_ID
            - echo "Connecting to GKE cluster..."
            - gcloud container clusters get-credentials codet-yugabyte-cluster --region us-central1 --project $GCP_PROJECT_ID
            - echo "Verifying cluster connection..."
            - kubectl get nodes
            - echo "Deploying staging cluster..."
            - kubectl apply -f manifests/clusters/codet-staging-yb-cluster.yaml
            - echo "Waiting for deployment to complete..."
            - kubectl wait --for=condition=ready ybcluster codet-staging-yb -n codet-staging-yb --timeout=1800s || (echo "‚ùå Deployment timeout - check manually (30 minutes)" && exit 1)  # ‚úÖ FIXED: Fail on timeout
            - echo "‚úÖ Staging deployment completed"

      - step:
          name: Deploy to Production
          deployment: production
          trigger: manual
          script:
            - echo "üöÄ Deploying to production environment..."
            - echo "Setting up GCP authentication..."
            - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-service-account.json
            - gcloud auth activate-service-account --key-file gcp-service-account.json
            - gcloud config set project $GCP_PROJECT_ID
            - echo "Connecting to GKE cluster..."
            - gcloud container clusters get-credentials codet-yugabyte-cluster --region us-central1 --project $GCP_PROJECT_ID
            - echo "Verifying cluster connection..."
            - kubectl get nodes
            - echo "üîí Deploying production security first..."
            - ./scripts/deploy-production-security.sh prod || echo "‚ùå Security deployment issues"
            - echo "Deploying production cluster..."
            - kubectl apply -f manifests/clusters/codet-prod-yb-cluster.yaml
            - echo "Waiting for deployment to complete..."
            - kubectl wait --for=condition=ready ybcluster codet-prod-yb -n codet-prod-yb --timeout=2700s || (echo "‚ùå Deployment timeout - check manually (45 minutes)" && exit 1)  # ‚úÖ FIXED: Fail on timeout
            - echo "üîç Running production validation..."
            - ./scripts/validate-deployment.sh codet-prod-yb || echo "‚ùå Some validation checks failed"
            - echo "‚úÖ Production deployment completed"

    develop:
      - step:
          name: Validate and Test
          image: python:3.11
          script:
            - pip install yamllint
            - yamllint -c .yamllint.yml manifests/ || (echo "‚ùå YAML linting failed" && exit 1)
            - echo "‚úÖ Development validation completed"

      - step:
          name: Deploy to Development
          deployment: development
          trigger: automatic
          script:
            - echo "üöÄ Deploying to development environment..."
            - echo "Setting up GCP authentication..."
            - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-service-account.json
            - gcloud auth activate-service-account --key-file gcp-service-account.json
            - gcloud config set project $GCP_PROJECT_ID
            - echo "Connecting to GKE cluster..."
            - gcloud container clusters get-credentials codet-yugabyte-cluster --region us-central1 --project $GCP_PROJECT_ID
            - echo "Verifying cluster connection..."
            - kubectl get nodes
            - echo "Deploying development cluster..."
            - kubectl apply -f manifests/clusters/codet-dev-yb-cluster.yaml
            - echo "Waiting for deployment to complete..."
            - kubectl wait --for=condition=ready ybcluster codet-dev-yb -n codet-dev-yb --timeout=1200s || echo "‚ùå Deployment timeout - check manually (20 minutes)"  # ‚úÖ FIXED: 20 minute timeout for dev
            - echo "‚úÖ Development deployment completed"

  pull-requests:
    '**':
      - step:
          name: Validate Changes
          image: python:3.11
          script:
            - pip install yamllint
            - yamllint -c .yamllint.yml manifests/ || (echo "‚ùå YAML linting failed" && exit 1)
            - echo "‚úÖ Pull request validation completed"

  custom:
    deploy-complete-stack:
      - variables:
          - name: ENVIRONMENT
            default: "dev"
      - step:
          name: Deploy Complete Stack
          script:
            - echo "üöÄ Deploying complete stack for environment: $ENVIRONMENT"
            - echo "Setting up GCP authentication..."
            - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-service-account.json
            - gcloud auth activate-service-account --key-file gcp-service-account.json
            - gcloud config set project $GCP_PROJECT_ID
            - echo "Connecting to GKE cluster..."
            - gcloud container clusters get-credentials codet-yugabyte-cluster --region us-central1 --project $GCP_PROJECT_ID
            - echo "Running complete stack deployment..."
            - chmod +x scripts/deploy-complete-stack.sh
            - ./scripts/deploy-complete-stack.sh false $ENVIRONMENT
            - echo "‚úÖ Complete stack deployment finished"

    # ‚úÖ FIXED: New pipeline for infrastructure deployment
    deploy-infrastructure:
      - step:
          name: Deploy Infrastructure
          script:
            - echo "üèóÔ∏è Deploying infrastructure with Terraform..."
            - cd terraform
            - terraform init
            - terraform plan
            - terraform apply -auto-approve
            - echo "‚úÖ Infrastructure deployment completed"

    # ‚úÖ FIXED: New pipeline for validation only
    validate-only:
      - step:
          name: Comprehensive Validation
          script:
            - echo "üîç Running comprehensive validation..."
            - echo "Setting up GCP authentication..."
            - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-service-account.json
            - gcloud auth activate-service-account --key-file gcp-service-account.json
            - gcloud config set project $GCP_PROJECT_ID
            - gcloud container clusters get-credentials codet-yugabyte-cluster --region us-central1 --project $GCP_PROJECT_ID
            - echo "Running deployment validation..."
            - ./scripts/validate-deployment.sh
            - echo "‚úÖ Validation completed"

# Required environment variables for your repository:
# GCP_PROJECT_ID - Your Google Cloud Project ID
# GCP_SERVICE_ACCOUNT_KEY - Base64 encoded service account key
# KUBE_CONFIG - Base64 encoded kubeconfig for your GKE cluster
