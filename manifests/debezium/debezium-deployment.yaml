# Debezium gRPC Connector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: debezium-grpc
  namespace: codet-prod
  labels:
    app: debezium
    component: cdc-connector
    environment: production
spec:
  replicas: 1  # HPA will manage this
  selector:
    matchLabels:
      app: debezium
      component: cdc-connector
  template:
    metadata:
      labels:
        app: debezium
        component: cdc-connector
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: debezium-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: debezium-connector
        image: quay.io/yugabyte/debezium-connector:2.22.0  # Match YB version
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: grpc
          protocol: TCP
        env:
        - name: DATABASE_HOSTNAME
          value: "yb-tserver.codet-prod-yb.svc.cluster.local"
        - name: DATABASE_PORT
          value: "5433"
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: yugabyte-cdc-credentials
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: yugabyte-cdc-credentials
              key: password
        - name: DATABASE_DBNAME
          value: "yugabyte"
        - name: DATABASE_SERVER_NAME
          value: "codet-prod"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "redpanda.codet-prod.svc.cluster.local:9092"
        - name: KAFKA_SASL_USERNAME
          valueFrom:
            secretKeyRef:
              name: redpanda-users
              key: yugabyte-cdc-username
        - name: KAFKA_SASL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redpanda-users
              key: yugabyte-cdc-password
        - name: KAFKA_SECURITY_PROTOCOL
          value: "SASL_SSL"
        - name: KAFKA_SASL_MECHANISM
          value: "SCRAM-SHA-512"
        - name: SCHEMA_INCLUDE_LIST
          value: "public"
        - name: TABLE_INCLUDE_LIST
          value: "public.*"
        - name: SNAPSHOT_MODE
          value: "initial_only"
        - name: DECIMAL_HANDLING_MODE
          value: "string"
        - name: TIME_PRECISION_MODE
          value: "adaptive_time_microseconds"
        - name: TOMBSTONES_ON_DELETE
          value: "true"
        - name: TRANSFORMS
          value: "unwrap"
        - name: TRANSFORMS_UNWRAP_TYPE
          value: "io.debezium.transforms.ExtractNewRecordState"
        - name: TRANSFORMS_UNWRAP_DROP_TOMBSTONES
          value: "false"
        - name: TRANSFORMS_UNWRAP_DELETE_HANDLING_MODE
          value: "rewrite"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/debezium
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: debezium-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: debezium
              topologyKey: kubernetes.io/hostname

---
# HorizontalPodAutoscaler for Debezium
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: debezium-hpa
  namespace: codet-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: debezium-grpc
  minReplicas: 1  # Always keep at least 1 running
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Service for Debezium
apiVersion: v1
kind: Service
metadata:
  name: debezium-service
  namespace: codet-prod
  labels:
    app: debezium
spec:
  selector:
    app: debezium
    component: cdc-connector
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: grpc
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
# ServiceAccount for Debezium
apiVersion: v1
kind: ServiceAccount
metadata:
  name: debezium-sa
  namespace: codet-prod
  labels:
    app: debezium

---
# ConfigMap for additional Debezium configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: debezium-config
  namespace: codet-prod
data:
  connector.properties: |
    # Additional connector properties
    database.streamid=codet-prod-stream
    database.master.addresses=yb-master.codet-prod-yb.svc.cluster.local:7100
    database.allowPublicKeyRetrieval=true
    database.useSSL=true
    database.sslmode=require
    
    # Offset storage
    offset.storage=kafka
    offset.storage.topic=debezium-offsets
    offset.storage.partitions=3
    offset.storage.replication.factor=3
    
    # History storage
    database.history=io.debezium.relational.history.KafkaDatabaseHistory
    database.history.kafka.topic=debezium-history
    database.history.kafka.recovery.attempts=10
    
    # Performance tuning
    max.batch.size=2048
    poll.interval.ms=100
    
    # Error handling
    errors.tolerance=all
    errors.log.enable=true
    errors.log.include.messages=true 